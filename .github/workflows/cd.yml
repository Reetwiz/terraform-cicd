# .github/workflows/cd.yml
name: 'Terraform CD'

on:
  push:
    branches:
      - main

# These permissions are required for creating releases/tags.
permissions:
  contents: write

jobs:
  #############################################################
  # Job 1: CREATE RELEASE (Slide 12)
  # Calculates a new version, tags it, and creates a release artifact.
  #############################################################
  create-release:
    name: 'Create Release Artifact'
    runs-on: ubuntu-latest
    outputs:
      # This output will be used by the deploy job to know which version to download
      release_version: ${{ steps.get_version.outputs.new_version }}
      
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to analyze commit history for versioning

      - name: 'Install semver tool'
        run: |
          wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /usr/local/bin/semver

      - name: 'Get version'
        id: get_version
        run: |
          # Get the last version from git tags
          last_version=$(git tag --sort=-version:refname | head -n1)
          
          if [ -z "$last_version" ]; then
            new_version="1.0.0"
          else
            # Remove 'v' prefix if present
            last_version=${last_version#v}
            
            # Determine version bump based on commit message
            commit_message="${{ github.event.head_commit.message }}"
            if [[ "$commit_message" =~ ^major ]]; then
              new_version=$(semver bump major $last_version)
            elif [[ "$commit_message" =~ ^feat ]]; then
              new_version=$(semver bump minor $last_version)
            else
              new_version=$(semver bump patch $last_version)
            fi
          fi
          
          echo "new_version=v$new_version" >> $GITHUB_OUTPUT
          echo "New version: v$new_version"

      - name: 'Build Production Artifact'
        run: |
          zip -r prod-release-artifact.zip *.tf modules/ locals.tf main.tf outputs.tf variables.tf
          
      - name: 'Push tag and create release'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.get_version.outputs.new_version }}
          tag_prefix: ""

      - name: 'Create GitHub Release'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.get_version.outputs.new_version }}
          prerelease: false
          title: "Release ${{ steps.get_version.outputs.new_version }}"
          files: "prod-release-artifact.zip"

  #############################################################
  # Job 2: DEPLOY TO PRODUCTION (Slide 13)
  # Downloads the release artifact and applies it.
  #############################################################
  deploy-to-prod:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: create-release # This job depends on the release being successfully created
    environment:
      name: production
      url: 'https://us-east-1.console.aws.amazon.com/ec2/v2/home?region=us-east-1#Instances:'
    
    steps:
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 'Download Release Asset'
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: ${{ github.repository }}
          version: ${{ needs.create-release.outputs.release_version }}
          file: 'prod-release-artifact.zip'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Extract Artifact'
        run: unzip prod-release-artifact.zip

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: 'Terraform Init (Prod)'
        run: terraform init

      - name: 'Terraform Plan (Prod)'
        run: terraform plan -no-color

      - name: 'Terraform Apply (Prod)'
        id: apply
        run: terraform apply -auto-approve